# Generated by Django 5.1.6 on 2025-04-26 13:10

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import storages.backends.s3
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('a_base', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Отчество')),
                ('date_of_birth', models.DateField(help_text='Дата рождения пользователя.', verbose_name='Дата рождения')),
                ('phone_number', models.CharField(error_messages={'unique': 'Пользователь с таким номером телефона уже существует.'}, help_text='Номер телефона в формате +992XXYYYYYY.', max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+992XXYYYYYY'.", regex='^\\+992\\d{9}$')], verbose_name='Номер телефона')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Электронная почта')),
                ('profile_picture', models.ImageField(blank=True, help_text='Фотография профиля', null=True, storage=storages.backends.s3.S3Storage(), upload_to='profile_pictures', verbose_name='Фотография профиля')),
                ('email_verified', models.BooleanField(default=False, help_text='Указывает, подтвержден ли email пользователя.', verbose_name='Электронная почта подтверждена')),
                ('inn', models.CharField(blank=True, error_messages={'unique': 'Пользователь с таким ИНН уже существует.'}, help_text='Индивидуальный номер налогоплательщика (9 цифр).', max_length=9, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='ИНН должен состоять из 9 цифр.', regex='^\\d{9}$'), django.core.validators.MinLengthValidator(9), django.core.validators.MaxLengthValidator(9)], verbose_name='ИНН')),
                ('subscription_start_date', models.DateTimeField(blank=True, null=True)),
                ('subscription_end_date', models.DateTimeField(blank=True, null=True)),
                ('confirmation_code', models.CharField(blank=True, max_length=6, null=True)),
                ('confirmation_code_created_at', models.DateTimeField(blank=True, null=True)),
                ('district', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='a_base.district', verbose_name='Район проживания пользователя')),
                ('gender', models.ForeignKey(blank=True, help_text='Пол пользователя', null=True, on_delete=django.db.models.deletion.PROTECT, to='a_base.gender')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='a_base.subscription', verbose_name='Подписка')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
    ]
