# Generated by Django 5.1.6 on 2025-05-06 11:14

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('a_base', '0001_initial'),
        ('clinics', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.TextField(blank=True, help_text='Краткое описание своей деятельности', verbose_name='Краткое описание')),
                ('about_ru', models.TextField(blank=True, help_text='Краткое описание своей деятельности', null=True, verbose_name='Краткое описание')),
                ('about_tg', models.TextField(blank=True, help_text='Краткое описание своей деятельности', null=True, verbose_name='Краткое описание')),
                ('license_number', models.CharField(blank=True, help_text='Регистрационный номер лицензии врача', max_length=100, null=True, verbose_name='Номер лицензии')),
                ('work_phone_number', models.CharField(blank=True, help_text='Рабочий телефон в формате +992XXYYYYYY.', max_length=13, null=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+992XXYYYYYY'.", regex='^\\+992\\d{9}$')], verbose_name='Рабочий телефон')),
                ('whatsapp', models.CharField(blank=True, help_text='Номер телефона для связи через WhatsApp', max_length=13, null=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+992XXYYYYYY'.", regex='^\\+992\\d{9}$')], verbose_name='Номер телефона WhatsApp')),
                ('telegram', models.CharField(blank=True, help_text='Номер телефона или никнейм для связи через Telegram', max_length=100, null=True, verbose_name='Номер телефона или никнейм в Telegram')),
                ('titles_and_merits', models.TextField(blank=True, help_text='Например: Отличник здравоохранения, член-корреспондент АМН', verbose_name='Звания и заслуги')),
                ('titles_and_merits_ru', models.TextField(blank=True, help_text='Например: Отличник здравоохранения, член-корреспондент АМН', null=True, verbose_name='Звания и заслуги')),
                ('titles_and_merits_tg', models.TextField(blank=True, help_text='Например: Отличник здравоохранения, член-корреспондент АМН', null=True, verbose_name='Звания и заслуги')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания записи', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего обновления записи', verbose_name='Дата обновления')),
                ('academic_degree', models.ForeignKey(blank=True, help_text='Ученая степень врача (если есть)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='a_base.academicdegree', verbose_name='Ученая степень')),
                ('experience_level', models.ForeignKey(blank=True, help_text='Уровень профессионального опыта врача', null=True, on_delete=django.db.models.deletion.SET_NULL, to='a_base.experiencelevel', verbose_name='Уровень опыта')),
                ('medical_category', models.ForeignKey(blank=True, help_text='Категория врача (например, высшая, первая)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='a_base.medicalcategory', verbose_name='Медицинская категория')),
                ('services', models.ManyToManyField(blank=True, help_text='Медицинские услуги, которые предоставляет врач', to='a_base.service', verbose_name='Услуги')),
                ('specialties', models.ManyToManyField(blank=True, help_text='Основные специализации врача', to='a_base.specialty', verbose_name='Специализации')),
                ('user', models.OneToOneField(help_text='Связанный аккаунт пользователя', on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Врач',
                'verbose_name_plural': 'Врачи',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graduation_year', models.PositiveIntegerField(help_text='Год окончания учебного заведения', verbose_name='Год окончания')),
                ('doctor', models.ForeignKey(help_text='Врач, к которому относится это образование', on_delete=django.db.models.deletion.CASCADE, related_name='educations', to='doctors.doctor', verbose_name='Врач')),
                ('university', models.ForeignKey(help_text='Университет, в котором доктор получил образование', on_delete=django.db.models.deletion.CASCADE, related_name='educations', to='a_base.university', verbose_name='Университет')),
            ],
            options={
                'verbose_name': 'Образование',
                'verbose_name_plural': 'Образования',
                'ordering': ['-graduation_year'],
            },
        ),
        migrations.CreateModel(
            name='Workplace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(blank=True, help_text='Должность, которую занимал или занимает врач', max_length=255, null=True, verbose_name='Должность')),
                ('position_ru', models.CharField(blank=True, help_text='Должность, которую занимал или занимает врач', max_length=255, null=True, verbose_name='Должность')),
                ('position_tg', models.CharField(blank=True, help_text='Должность, которую занимал или занимает врач', max_length=255, null=True, verbose_name='Должность')),
                ('monday_start', models.TimeField(blank=True, null=True, verbose_name='Понедельник - начало')),
                ('monday_end', models.TimeField(blank=True, null=True, verbose_name='Понедельник - конец')),
                ('tuesday_start', models.TimeField(blank=True, null=True, verbose_name='Вторник - начало')),
                ('tuesday_end', models.TimeField(blank=True, null=True, verbose_name='Вторник - конец')),
                ('wednesday_start', models.TimeField(blank=True, null=True, verbose_name='Среда - начало')),
                ('wednesday_end', models.TimeField(blank=True, null=True, verbose_name='Среда - конец')),
                ('thursday_start', models.TimeField(blank=True, null=True, verbose_name='Четверг - начало')),
                ('thursday_end', models.TimeField(blank=True, null=True, verbose_name='Четверг - конец')),
                ('friday_start', models.TimeField(blank=True, null=True, verbose_name='Пятница - начало')),
                ('friday_end', models.TimeField(blank=True, null=True, verbose_name='Пятница - конец')),
                ('saturday_start', models.TimeField(blank=True, null=True, verbose_name='Суббота - начало')),
                ('saturday_end', models.TimeField(blank=True, null=True, verbose_name='Суббота - конец')),
                ('sunday_start', models.TimeField(blank=True, null=True, verbose_name='Воскресенье - начало')),
                ('sunday_end', models.TimeField(blank=True, null=True, verbose_name='Воскресенье - конец')),
                ('appointment_interval', models.PositiveSmallIntegerField(default=30, help_text='Длительность одного приема пациента в минутах (15-360)', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(360)], verbose_name='Интервал приема')),
                ('clinic', models.ForeignKey(help_text='Медицинское учреждение, где работал или работает врач', on_delete=django.db.models.deletion.CASCADE, related_name='workplaces', to='clinics.clinic', verbose_name='Медицинское учреждение')),
                ('doctor', models.ForeignKey(help_text='Врач, который работал или работает в этом учреждении', on_delete=django.db.models.deletion.CASCADE, related_name='workplaces', to='doctors.doctor', verbose_name='Врач')),
            ],
            options={
                'verbose_name': 'Место работы',
                'verbose_name_plural': 'Места работы',
            },
        ),
        migrations.CreateModel(
            name='DoctorLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='languages', to='doctors.doctor', verbose_name='Доктор')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='a_base.language', verbose_name='Язык')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='a_base.languagelevel', verbose_name='Уровень владения')),
            ],
            options={
                'verbose_name': 'Язык доктора',
                'verbose_name_plural': 'Языки доктора',
                'unique_together': {('doctor', 'language')},
            },
        ),
    ]
