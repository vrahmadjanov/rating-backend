# Generated by Django 5.1.6 on 2025-04-25 13:34

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('a_base', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название языка', max_length=100, unique=True, verbose_name='Язык')),
            ],
            options={
                'verbose_name': 'Язык',
                'verbose_name_plural': 'Языки',
            },
        ),
        migrations.CreateModel(
            name='LanguageLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(help_text='Уровень владения языком', max_length=100, unique=True, verbose_name='Уровень владения')),
            ],
            options={
                'verbose_name': 'Уровень владения языком',
                'verbose_name_plural': 'Уровни владения языками',
            },
        ),
        migrations.CreateModel(
            name='MedicalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название медицинской категории')),
            ],
            options={
                'verbose_name': 'Медицинская категория',
                'verbose_name_plural': 'Медицинские категории',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название услуги')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название специальности')),
            ],
            options={
                'verbose_name': 'Специальность',
                'verbose_name_plural': 'Специальности',
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experience_years', models.CharField(choices=[('0-3', '0-3 года'), ('4-10', '4-10 лет'), ('11-20', '11-20 лет'), ('20+', 'Более 20 лет')], help_text='Общий стаж работы врача', max_length=7, null=True, verbose_name='Стаж работы')),
                ('about', models.TextField(blank=True, help_text='Краткое описание своей деятельности', null=True, verbose_name='Краткое описание')),
                ('philosophy', models.TextField(blank=True, help_text='Краткое описание подхода к пациентам', null=True, verbose_name='Философия работы')),
                ('license_number', models.CharField(blank=True, help_text='Регистрационный номер лицензии врача', max_length=100, null=True, verbose_name='Номер лицензии')),
                ('work_phone_number', models.CharField(help_text='Рабочий телефон в формате +992XXYYYYYY.', max_length=13, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+992XXYYYYYY'.", regex='^\\+992\\d{9}$')], verbose_name='phone number')),
                ('whatsapp', models.CharField(blank=True, help_text='Номер телефона для связи через WhatsApp', null=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+992XXYYYYYY'.", regex='^\\+992\\d{9}$')], verbose_name='Номер телефона WhatsApp')),
                ('telegram', models.CharField(blank=True, help_text='Номер телефона для связи через Telegram', null=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+992XXYYYYYY'.", regex='^\\+992\\d{9}$')], verbose_name='Номер телефона Telegram')),
                ('is_verified', models.BooleanField(default=True, help_text='Флаг, указывающий, верифицирован ли врач', verbose_name='Верифицирован')),
                ('verification_date', models.DateField(blank=True, help_text='Дата прохождения верификации', null=True, verbose_name='Дата верификации')),
                ('verified_by', models.CharField(blank=True, help_text='Имя администратора, который провел верификацию', max_length=255, null=True, verbose_name='Кем верифицирован')),
                ('titles_and_merits', models.TextField(blank=True, help_text='Например: Отличник здравоохранения, член-корреспондент АМН', null=True, verbose_name='Звания и заслуги')),
                ('academic_degree', models.ForeignKey(blank=True, help_text='Ученая степень врача (если есть)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='a_base.academicdegree', verbose_name='Ученая степень')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('medical_category', models.ForeignKey(blank=True, help_text='Категория врача (например, высшая, первая)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='doctors.medicalcategory', verbose_name='Медицинская категория')),
                ('services', models.ManyToManyField(blank=True, help_text='Медицинские услуги, которые предоставляет врач', to='doctors.service', verbose_name='Услуги')),
                ('specialty', models.ManyToManyField(blank=True, help_text='Основные специализации врача', null=True, to='doctors.specialty', verbose_name='Специализации')),
            ],
            options={
                'verbose_name': 'Врач',
                'verbose_name_plural': 'Врачи',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(help_text='Название учебного заведения', max_length=255, verbose_name='Название вуза')),
                ('city', models.CharField(help_text='Город, где находится учебное заведение', max_length=100, verbose_name='Город')),
                ('country', models.CharField(help_text='Страна, где находится учебное заведение', max_length=100, verbose_name='Страна')),
                ('graduation_year', models.PositiveIntegerField(help_text='Год окончания учебного заведения', verbose_name='Год окончания')),
                ('doctor', models.ForeignKey(help_text='Врач, к которому относится это образование', on_delete=django.db.models.deletion.CASCADE, related_name='educations', to='doctors.doctor', verbose_name='Врач')),
            ],
            options={
                'verbose_name': 'Образование',
                'verbose_name_plural': 'Образования',
                'ordering': ['-graduation_year'],
            },
        ),
        migrations.CreateModel(
            name='MedicalInstitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Официальное название медицинского учреждения', max_length=255, verbose_name='Название учреждения')),
                ('institution_type', models.CharField(choices=[('HOSPITAL', 'Госпитальная служба'), ('PRIMARY_CARE', 'Учреждение ПМСП')], help_text='Тип медицинского учреждения (Госпитальная служба или Учреждение ПМСП)', max_length=50, verbose_name='Тип учреждения')),
                ('address', models.CharField(help_text='Адрес медицинского учреждения', max_length=255, verbose_name='Адрес')),
                ('country', models.CharField(default='Таджикистан', help_text='Страна, где находится медицинское учреждение', max_length=100, verbose_name='Страна')),
                ('phone_number', models.CharField(blank=True, help_text='Контактный номер медицинского учреждения', max_length=13, null=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+992XXYYYYYY'.", regex='^\\+992\\d{9}$')], verbose_name='Контактный телефон')),
                ('email', models.EmailField(blank=True, help_text='Электронная почта учреждения', max_length=254, null=True, verbose_name='Электронная почта')),
                ('website', models.URLField(blank=True, help_text='Официальный веб-сайт учреждения', null=True, verbose_name='Веб-сайт')),
                ('latitude', models.FloatField(blank=True, help_text='Географическая широта местоположения учреждения', null=True, verbose_name='Широта')),
                ('longitude', models.FloatField(blank=True, help_text='Географическая долгота местоположения учреждения', null=True, verbose_name='Долгота')),
                ('district', models.ForeignKey(help_text='Район, где находится медицинское учреждение', on_delete=django.db.models.deletion.CASCADE, to='a_base.district', verbose_name='Район')),
                ('region', models.ForeignKey(help_text='Область, в которой находится медицинское учреждение', on_delete=django.db.models.deletion.CASCADE, to='a_base.region', verbose_name='Область')),
            ],
            options={
                'verbose_name': 'Медицинское учреждение',
                'verbose_name_plural': 'Медицинские учреждения',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Workplace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(blank=True, help_text='Должность, которую занимал или занимает врач', max_length=255, null=True, verbose_name='Должность')),
                ('start_date', models.DateField(blank=True, help_text='Дата, когда врач начал работать в этом учреждении', null=True, verbose_name='Дата начала работы')),
                ('end_date', models.DateField(blank=True, help_text='Дата, когда врач закончил работать в этом учреждении (если продолжает работать, оставьте пустым)', null=True, verbose_name='Дата окончания работы')),
                ('doctor', models.ForeignKey(help_text='Врач, который работал или работает в этом учреждении', on_delete=django.db.models.deletion.CASCADE, related_name='workplaces', to='doctors.doctor', verbose_name='Врач')),
                ('medical_institution', models.ForeignKey(help_text='Медицинское учреждение, где работал или работает врач', on_delete=django.db.models.deletion.CASCADE, related_name='workplaces', to='doctors.medicalinstitution', verbose_name='Медицинское учреждение')),
            ],
            options={
                'verbose_name': 'Место работы',
                'verbose_name_plural': 'Места работы',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monday_start', models.TimeField(blank=True, null=True, verbose_name='Понедельник - начало')),
                ('monday_end', models.TimeField(blank=True, null=True, verbose_name='Понедельник - конец')),
                ('tuesday_start', models.TimeField(blank=True, null=True, verbose_name='Вторник - начало')),
                ('tuesday_end', models.TimeField(blank=True, null=True, verbose_name='Вторник - конец')),
                ('wednesday_start', models.TimeField(blank=True, null=True, verbose_name='Среда - начало')),
                ('wednesday_end', models.TimeField(blank=True, null=True, verbose_name='Среда - конец')),
                ('thursday_start', models.TimeField(blank=True, null=True, verbose_name='Четверг - начало')),
                ('thursday_end', models.TimeField(blank=True, null=True, verbose_name='Четверг - конец')),
                ('friday_start', models.TimeField(blank=True, null=True, verbose_name='Пятница - начало')),
                ('friday_end', models.TimeField(blank=True, null=True, verbose_name='Пятница - конец')),
                ('saturday_start', models.TimeField(blank=True, null=True, verbose_name='Суббота - начало')),
                ('saturday_end', models.TimeField(blank=True, null=True, verbose_name='Суббота - конец')),
                ('sunday_start', models.TimeField(blank=True, null=True, verbose_name='Воскресенье - начало')),
                ('sunday_end', models.TimeField(blank=True, null=True, verbose_name='Воскресенье - конец')),
                ('appointment_interval', models.PositiveSmallIntegerField(default=30, help_text='Длительность одного приема пациента в минутах (15-360)', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(360)], verbose_name='Интервал приема')),
                ('workplace', models.OneToOneField(help_text='Связанное место работы врача в медицинском учреждении', on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='doctors.workplace', verbose_name='Место работы')),
            ],
            options={
                'verbose_name': 'Расписание врача',
                'verbose_name_plural': 'Расписания врачей',
                'ordering': ['workplace__doctor__user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='UserLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_languages', to='doctors.doctor', verbose_name='Доктор')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doctors.language', verbose_name='Язык')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doctors.languagelevel', verbose_name='Уровень владения')),
            ],
            options={
                'verbose_name': 'Язык доктора',
                'verbose_name_plural': 'Языки доктора',
                'unique_together': {('doctor', 'language')},
            },
        ),
    ]
